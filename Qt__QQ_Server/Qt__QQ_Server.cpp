#include "Qt__QQ_Server.h"
#include<QMessageBox>
#include<QSqlDatabase>
#include<QSqlError>
#include <QStringList>
#include <QHeaderView>
#include <QTableWidgetItem>


const int tcpPort = 8888;
const int gUdpPort = 6666;
Qt__QQ_Server::Qt__QQ_Server(QWidget *parent)
    : QDialog(parent)
	,m_pixPath("")
{
    ui.setupUi(this);

	if (!connectMySql()) {
		QMessageBox::warning(NULL,
			QString::fromLocal8Bit("提示"),
			QString::fromLocal8Bit("链接数据库失败！"));
		close();
		return;
	}
	setDepNameMap();
	setStatusMap();
	setOnlineMap();

	initComboBoxData();

	m_queryInfoModel.setQuery("SELECT *FROM tab_employees");
	//设置编辑触发条件―只读 
	ui.tableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);

	//初始化查询公司群所有员工信息
	m_employeeID = 0;
	m_depID = getCompDepID();
	m_compDepID = m_depID;

	updateTableData();

	//定时刷新数据
	m_timer = new QTimer(this);
	m_timer->setInterval(200);
	m_timer->start();
	connect(m_timer,&QTimer::timeout,this,&Qt__QQ_Server::onRefresh);

	initTcpSocket();

	initUdpSocket();

}

void Qt__QQ_Server::initTcpSocket() {
	m_tcpServer = new TcpServer(tcpPort);
	m_tcpServer->run();

	//收到Tcp客户端发来的信息后进行udp广播
	connect(m_tcpServer, &TcpServer::signalTcpMsgComes, this,
		&Qt__QQ_Server::onUDPbroadMsg);
}

bool Qt__QQ_Server::connectMySql() {
	QSqlDatabase db = QSqlDatabase::addDatabase("QMYSQL");
	db.setDatabaseName("qtqq");		//数据库名称
	db.setHostName("xxx");	//主机名
	db.setUserName("root");			//用户名
	db.setPassword("xxx");	//密码
	db.setPort(3306);				//端口


	if (db.open()) {
		/*QMessageBox::information(NULL, QString::fromLocal8Bit("提示"),
			QString::fromLocal8Bit("链接数据库成功"));*/
		qDebug() << QString::fromLocal8Bit("链接数据库成功")<< endl;
		return true;
	}
	//判断出错
	QSqlError error;
	error = db.lastError();
	if (error.isValid())//发生错误时isValid()返回true
	{
		switch (error.type()) {
		case QSqlError::NoError:
			qDebug() << "无错误";
			break;
		case QSqlError::ConnectionError://连接错语
			qDebug() << error.text();
			break;
		case QSqlError::StatementError://语句错语
			qDebug() << error.text();
			break;
		case QSqlError::TransactionError://事务错误
			qDebug() << error.text();
			break;
		default://未知错误
			qDebug() << error.text();
			break;
		}
	}
	return false;
}

void Qt__QQ_Server::updateTableData(int depID, int employeeID) {
	ui.tableWidget->clear();

	if (depID && depID != m_compDepID ){//查询部门
		m_queryInfoModel.setQuery(QString("SELECT * FROM tab_employees WHERE \
		departmentID = %1").arg(depID));
	}else if (employeeID) {//精确查找
		m_queryInfoModel.setQuery(QString("SELECT * FROM tab_employees WHERE \
		employeeID = %1").arg(employeeID));
	}else{//查询所有
		m_queryInfoModel.setQuery(QString("SELECT * FROM tab_employees"));
	}

	int rows = m_queryInfoModel.rowCount();//总行数(总记录数)
	int columns = m_queryInfoModel.columnCount();//总列数(总字段数)
	
	QModelIndex index;//模型索引

	//设置表格的行数列数
	ui.tableWidget->setRowCount(rows);
	ui.tableWidget->setColumnCount(columns);

	//设置表头
	QStringList headers;
	headers << QStringLiteral("部门")
		<< QStringLiteral("工号")
		<< QStringLiteral("员工姓名")
		<< QStringLiteral("员工签名")
		<< QStringLiteral("员工状态")
		<< QStringLiteral("员工头像")
		<< QStringLiteral("在线状态");
	ui.tableWidget->setHorizontalHeaderLabels(headers);

	//设置列等宽
	ui.tableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < columns; j++) {
			index = m_queryInfoModel.index(i,j);//传入行列
			QString strData = m_queryInfoModel.data(index).toString();//获取i行j列的数据
			
			//获取字段名称
			QSqlRecord record = m_queryInfoModel.record(i);//当前行的记录
			QString strRecordName = record.fieldName(j);//获取当前行第j列的记录名称
			if (strRecordName == QLatin1String("departmentID")) {
				ui.tableWidget->setItem(i, j, new QTableWidgetItem(m_depNameMap.
					value(strData)));
				continue;
			} else if (strRecordName == QLatin1String("status")) {
				ui.tableWidget->setItem(i, j, new QTableWidgetItem(m_statusMap.
					value(strData)));
				continue;
			} else if (strRecordName == QLatin1String("online")) {
				ui.tableWidget->setItem(i, j, new QTableWidgetItem(m_onlineMap.
					value(strData)));
				continue;
			}

			

			ui.tableWidget->setItem(i, j, new QTableWidgetItem(strData));
		}
	}
	
}

int Qt__QQ_Server::getCompDepID() {
	QSqlQuery queryCompDepID(QString("SELECT departmentID FROM tab_department WHERE \
	department_name = '%1'").arg(QString::fromLocal8Bit("公司群")));
	queryCompDepID.exec();
	queryCompDepID.next();
	
	int compDepID = queryCompDepID.value(0).toInt();//查询结果的第0列转化为整型
	return compDepID;
}

void Qt__QQ_Server::setDepNameMap() {
	m_depNameMap.insert(QStringLiteral("2001"),QStringLiteral("人事部"));
	m_depNameMap.insert(QStringLiteral("2002"),QStringLiteral("研发部"));
	m_depNameMap.insert(QStringLiteral("2003"),QStringLiteral("市场部"));
}

void Qt__QQ_Server::setStatusMap() {
	m_statusMap.insert(QStringLiteral("1"),QStringLiteral("有效"));
	m_statusMap.insert(QStringLiteral("0"),QStringLiteral("已注销"));
}

void Qt__QQ_Server::setOnlineMap() {
	m_onlineMap.insert(QStringLiteral("1"),QStringLiteral("离线"));
	m_onlineMap.insert(QStringLiteral("2"),QStringLiteral("在线"));
	m_onlineMap.insert(QStringLiteral("3"),QStringLiteral("隐身"));
}

//设置下拉框中文本对应的值 
void Qt__QQ_Server::initComboBoxData() {
	QString itemText;//组合框项的文本
	//获取公司总的部门数
	QSqlQueryModel queryDepModel;
	queryDepModel.setQuery("SELECT * FROM tab_department");
	int depCounts = queryDepModel.rowCount() - 1;//部门总数应减去公司群，公司群不算公司部门。
	
	//上面的下拉框
	for (int i = 0; i < depCounts; i++) {
		itemText = ui.employeeDepBox->itemText(i);
		QSqlQuery queryDepID(QString("SELECT departmentID FROM tab_department WHERE \
		department_name = '%1'").arg(itemText));
		queryDepID.exec();
		queryDepID.first();//指向结果集第一条，默认是指向结果集外的。

		//设置员工所属部门组合框的数据为相应的部门QQ号
		ui.employeeDepBox->setItemData(i, queryDepID.value(0).toInt());
	}
	
	//下面的下拉框
	//多一个公司群部门
	for (int i = 0; i < depCounts + 1; i++) {
		itemText = ui.departmentBox->itemText(i);//拿到当前下拉框选中的文本信息
		QSqlQuery queryDepID(QString("SELECT departmentID FROM tab_department WHERE \
		department_name = '%1'").arg(itemText)); 
		queryDepID.exec();
		queryDepID.first();

		//设置部门组合框的数据位相应的部门QQ号
		ui.departmentBox->setItemData(i, queryDepID.value(0).toInt());
	//点击查询按钮后，通过获取此处设置的data(部门号)，传送给updateTableData来更新表格视图中的数据
	//将组合框中给定索引项的数据角色设置为指定值。
	}

}

void Qt__QQ_Server::initUdpSocket() {
	m_udpSender = new QUdpSocket(this);

}

void Qt__QQ_Server::onUDPbroadMsg(QByteArray& btData) {
	//由于在同一台电脑上测试
	for (quint16 port = gUdpPort; port < gUdpPort+ 200; port++) {
		m_udpSender->writeDatagram(btData,btData.size(),QHostAddress::Broadcast,port);
	}
}

void Qt__QQ_Server::onRefresh() {
	updateTableData(m_depID,m_employeeID);
}

void Qt__QQ_Server::on_queryDepartmentBtn_clicked() {
	ui.queryIDLineEdit->clear();
	m_employeeID = 0;
	m_depID = ui.departmentBox->currentData().toInt();
	updateTableData(m_depID);
}

void Qt__QQ_Server::on_queryIDBtn_clicked() {
	ui.departmentBox->setCurrentIndex(0);
	m_depID = m_compDepID;

	//检测员工QQ号是否输入
	if (!ui.queryIDLineEdit->text().length()) {
		QMessageBox::information(this,
				QStringLiteral("提示"),
				QStringLiteral("请输入员工QQ号!"));
		ui.queryIDLineEdit->setFocus();
		return;
	}
	//获取用户输入的员工QQ号
	int employeeID = ui.queryIDLineEdit->text().toInt();

	QSqlQuery queryInfo(QString("SELECT * FROM tab_employees WHERE \
		employeeID = %1").arg(employeeID));
	queryInfo.exec();
	//检测员工号是否输入正确
	if (!queryInfo.next()) {
		QMessageBox::information(this,
			QStringLiteral("提示"),
			QStringLiteral("请输入正确的员工QQ号"));
		ui.queryIDLineEdit->setFocus();
		return;
	} else {
		m_employeeID = employeeID;
	}


	//updateTableData(m_depID,m_employeeID);


}

void Qt__QQ_Server::on_logoutBtn_clicked() {
	ui.queryIDLineEdit->clear(); 
	ui.departmentBox->setCurrentIndex(0);

	//检测员工QQ号是否输入
	if (!ui.logoutIDLineEdit->text().length()) {
		QMessageBox::information(this,
			QStringLiteral("提示"),
			QStringLiteral("请输入员工QQ号!"));
		ui.logoutIDLineEdit->setFocus();
		return;
	}

	//获取用户输入的员工QQ号
	int employeeID = ui.logoutIDLineEdit->text().toInt();

	QSqlQuery queryInfo(QString("SELECT employee_name FROM tab_employees WHERE \
		employeeID = %1").arg(employeeID));
	queryInfo.exec();
	//检测员工号是否输入正确
	if (!queryInfo.next()) {
		QMessageBox::information(this,
			QStringLiteral("提示"),
			QStringLiteral("请输入正确的员工QQ号"));
		ui.logoutIDLineEdit->setFocus();
		return;
	} else {
		//注销操作，更新数据库数据，将员工的status设置为0
		QSqlQuery sqlUpdate(QString("UPDATE tab_employees SET status = 0 WHERE employeeID = %1")
			.arg(employeeID));
		sqlUpdate.exec();

	//获取注销员工的姓名
		QString  strName = queryInfo.value(0).toString();


		QMessageBox::information(this,
			QString::fromLocal8Bit("提示"),
			QString::fromLocal8Bit("员工 %1 的企业QQ：%2 已被注销")
			.arg(strName)
			.arg(employeeID));
		ui.logoutIDLineEdit->clear();
	}
}

void Qt__QQ_Server::on_selectPictureBtn_clicked() {
	//获取选择的头像路径
	m_pixPath = QFileDialog::getOpenFileName(
		this,
		QString::fromLocal8Bit("选择头像"),
		".",
		"*.png;;*.jpg"
	);
	
	//是否选择头像
	if (!m_pixPath.size()) {
		return;
	}

	//将头像显示到标签
	QPixmap pixmap;
	pixmap.load(m_pixPath);

	qreal widthRatio = (qreal)ui.headLabel->width() / (qreal)pixmap.width();
	qreal heightRatio = (qreal)ui.headLabel->height() / (qreal)pixmap.height();

	QSize size(pixmap.width() * widthRatio,pixmap.height() * heightRatio);
	ui.headLabel->setPixmap(pixmap.scaled(size));

}

void Qt__QQ_Server::on_addBtn_clicked() {
	//检测员工姓名的输入
	QString strName = ui.nameLineEdit->text();
	if (!strName.size()) {
		QMessageBox::information(this,
			QString::fromLocal8Bit("提示"),
			QString::fromLocal8Bit("请输入员工姓名"));
		ui.nameLineEdit->setFocus();
		return;
	}

	//检测员工选项头像
	if (!m_pixPath.size()) {
		QMessageBox::information(this,
			QString::fromLocal8Bit("提示"),
			QString::fromLocal8Bit("请选择员工头像路径"));
		return;
	}

	//数据库插入新的员工数据
	//获取员工QQ号

	QSqlQuery maxEmployeeID("SELECT MAX(employeeID) FROM tab_employees");
	maxEmployeeID.exec();
	maxEmployeeID.next();

	int employeeID = maxEmployeeID.value(0).toInt() + 1;//当前QQ号

	//获取员工部门QQ号
	int depID = ui.employeeDepBox->currentData().toInt();

	//图片路径设置为xxx\xxx\  反斜杠
	m_pixPath.replace("/", "\\\\");//用了转义符，斜杠替换


	QSqlQuery insertSql(QString("INSERT INTO tab_employees(departmentID,employeeID,employee_name,\
		picture) VALUES(%1,%2,'%3','%4')")
		.arg(depID)
		.arg(employeeID)
		.arg(strName)
		.arg(m_pixPath));
	insertSql.exec();

	QMessageBox::information(this,
		QString::fromLocal8Bit("提示"),
		QString::fromLocal8Bit("新增员工成功"));
	m_pixPath = "";
	ui.headLabel->setText(QStringLiteral("  员工寸照  "));
	ui.nameLineEdit->clear();
}

